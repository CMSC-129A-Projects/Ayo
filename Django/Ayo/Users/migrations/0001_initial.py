# Generated by Django 3.2 on 2021-04-28 07:03

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('contact_number', models.CharField(max_length=15)),
                ('address', models.CharField(max_length=200)),
                ('registration', models.DateTimeField(auto_now_add=True, null=True)),
                ('password', models.CharField(blank=True, max_length=200)),
                ('role', models.CharField(blank=True, max_length=10, null=True)),
                ('username', models.CharField(max_length=15, null=True, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Owner',
            fields=[
                ('owner_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('business_permit', models.FileField(blank=True, null=True, upload_to='business_permit')),
                ('owner_user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='owner_user_id', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Pharmacy Owner',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('customer_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('valid_id1', models.FileField(blank=True, null=True, upload_to='customer_ids')),
                ('medical_record', models.FileField(blank=True, null=True, upload_to='customer_medical_records')),
                ('is_verified', models.BooleanField(default=False)),
                ('is_rejected', models.BooleanField(default=False)),
                ('customer_user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='customer_user_id', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Customer',
            },
        ),
        migrations.CreateModel(
            name='PharmacyWorker',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='Users.user')),
                ('worker_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('medical_license', models.FileField(blank=True, null=True, upload_to='medical_licences')),
                ('is_available', models.BooleanField(default=True)),
                ('worker_user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='workers_user_id', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Pharmacy Worker',
            },
            bases=('Users.user',),
        ),
    ]
